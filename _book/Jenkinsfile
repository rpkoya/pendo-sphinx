/* Only keep the 10 most recent builds. */
def projectProperties = [
    [$class: 'BuildDiscarderProperty',strategy: [$class: 'LogRotator', numToKeepStr: '5']],
]

properties(projectProperties)

node () {

  stage('Build') {
    docker.image('billryan/gitbook').inside {
        slackSend (message: "Building User Manual [${env.BUILD_NUMBER}] (${env.BUILD_URL})")
        checkout scm
        sh 'export HOME=/tmp; ls -l; gitbook install'
        sh 'export HOME=/tmp; ls -l; gitbook build'
        sh 'export HOME=/tmp; ls -l; gitbook pdf . user-manual-$BRANCH_NAME.pdf'
        sh 'tar czvf user-manual-$BRANCH_NAME.tgz _book user-manual-$BRANCH_NAME.pdf'
    }
  }

  stage('Package for Maven') {
        slackSend (message: "Packaging User Manual for Maven [${env.BUILD_NUMBER}] (${env.BUILD_URL})")

        // We will update the version of the so that the artifact has a version on it
        sh './mvnw versions:set -DnewVersion=' + env.BRANCH_NAME
        sh './mvnw clean install deploy'
  }

  stage('Build Docker Images') {
     slackSend (color: 'good', message: "Packaging User Manual for Docker [${env.BUILD_NUMBER}] (${env.BUILD_URL})")

     /* Build the Docker image with a Dockerfile, tagging it with the build number */
     app = docker.build "pendosystems/documentation:${env.BRANCH_NAME}"
  }

  stage('Archive Artifacts') {
    slackSend (message: "Archiving User Manual [${env.BUILD_NUMBER}] (${env.BUILD_URL})")
    step([$class: 'ArtifactArchiver', artifacts: 'user-manual-$BRANCH_NAME.tgz', fingerprint: true])
    deleteDir()
  }

}
